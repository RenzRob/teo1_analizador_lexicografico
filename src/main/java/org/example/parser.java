
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package org.example;

import java_cup.runtime.Symbol;
import java.util.HashMap;
import java.util.Map;
import java.util.List;
import java.util.ArrayList;
import org.example.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\076\000\002\002\006\000\002\002\004\000\002\002" +
    "\003\000\002\003\006\000\002\003\005\000\002\004\005" +
    "\000\002\004\004\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\006\005\000\002" +
    "\006\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\003\000\002\010\005\000\002\010\005\000\002\010\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\005\000\002\011\003\000\002\012\011\000\002" +
    "\013\005\000\002\013\005\000\002\013\003\000\002\013" +
    "\004\000\002\014\005\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\016\003\000\002\016\004\000\002" +
    "\017\011\000\002\020\006\000\002\021\005\000\002\021" +
    "\004\000\002\022\005\000\002\022\004\000\002\023\005" +
    "\000\002\024\007\000\002\024\007\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\026\004\000\002" +
    "\026\004\000\002\026\004\000\002\026\004\000\002\027" +
    "\012\000\002\030\005\000\002\030\005\000\002\030\003" +
    "\000\002\030\004\000\002\031\005\000\002\032\005\000" +
    "\002\032\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\174\000\006\034\005\047\007\001\002\000\004\036" +
    "\042\001\002\000\006\035\015\040\016\001\002\000\004" +
    "\002\014\001\002\000\004\011\011\001\002\000\004\002" +
    "\uffff\001\002\000\004\054\012\001\002\000\006\002\ufffd" +
    "\047\007\001\002\000\004\002\ufffe\001\002\000\004\002" +
    "\000\001\002\000\004\036\uffd8\001\002\000\004\004\024" +
    "\001\002\000\004\054\022\001\002\000\004\035\021\001" +
    "\002\000\004\036\uffd9\001\002\000\006\035\uffd6\040\016" +
    "\001\002\000\004\035\uffd7\001\002\000\006\041\030\043" +
    "\027\001\002\000\004\041\026\001\002\000\004\054\uffd5" +
    "\001\002\000\004\004\024\001\002\000\004\042\031\001" +
    "\002\000\004\040\032\001\002\000\010\044\033\045\036" +
    "\046\034\001\002\000\006\041\uffd1\043\uffd1\001\002\000" +
    "\006\041\uffd0\043\uffd0\001\002\000\006\041\uffd3\043\uffd3" +
    "\001\002\000\006\041\uffd2\043\uffd2\001\002\000\004\043" +
    "\040\001\002\000\010\044\033\045\036\046\034\001\002" +
    "\000\006\041\uffd4\043\uffd4\001\002\000\012\004\052\016" +
    "\043\030\051\047\053\001\002\000\004\051\171\001\002" +
    "\000\006\031\165\054\uffdd\001\002\000\004\054\ufff9\001" +
    "\002\000\004\054\162\001\002\000\004\054\ufffa\001\002" +
    "\000\004\054\ufff8\001\002\000\004\051\142\001\002\000" +
    "\004\005\063\001\002\000\012\004\057\006\061\010\060" +
    "\011\062\001\002\000\004\037\056\001\002\000\004\054" +
    "\ufff7\001\002\000\004\002\001\001\002\000\004\054\uffcc" +
    "\001\002\000\004\054\uffce\001\002\000\004\054\uffcd\001" +
    "\002\000\004\054\uffcf\001\002\000\016\004\073\006\066" +
    "\010\065\011\070\050\075\051\072\001\002\000\040\012" +
    "\uffea\013\uffea\014\uffea\015\uffea\017\uffea\020\uffea\022\uffea" +
    "\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea\043\uffea\052" +
    "\uffea\054\uffea\001\002\000\040\012\uffec\013\uffec\014\uffec" +
    "\015\uffec\017\uffec\020\uffec\022\uffec\023\uffec\024\uffec\025" +
    "\uffec\026\uffec\027\uffec\043\uffec\052\uffec\054\uffec\001\002" +
    "\000\040\012\uffed\013\uffed\014\uffed\015\uffed\017\uffed\020" +
    "\uffed\022\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed" +
    "\043\uffed\052\uffed\054\uffed\001\002\000\040\012\ufff2\013" +
    "\ufff2\014\134\015\133\017\ufff2\020\ufff2\022\ufff2\023\ufff2" +
    "\024\ufff2\025\ufff2\026\ufff2\027\ufff2\043\ufff2\052\ufff2\054" +
    "\ufff2\001\002\000\004\054\ufff5\001\002\000\010\012\131" +
    "\013\130\054\ufff6\001\002\000\014\004\073\006\066\010" +
    "\065\050\075\051\072\001\002\000\040\012\uffee\013\uffee" +
    "\014\uffee\015\uffee\017\uffee\020\uffee\022\uffee\023\uffee\024" +
    "\uffee\025\uffee\026\uffee\027\uffee\043\uffee\052\uffee\054\uffee" +
    "\001\002\000\040\012\uffef\013\uffef\014\uffef\015\uffef\017" +
    "\uffef\020\uffef\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef" +
    "\027\uffef\043\uffef\052\uffef\054\uffef\001\002\000\004\051" +
    "\076\001\002\000\006\021\102\053\077\001\002\000\016" +
    "\022\121\023\122\024\125\025\120\026\124\027\123\001" +
    "\002\000\004\043\110\001\002\000\010\017\105\020\104" +
    "\043\uffc8\001\002\000\004\053\077\001\002\000\004\043" +
    "\uffc7\001\002\000\004\053\077\001\002\000\004\053\077" +
    "\001\002\000\004\043\uffca\001\002\000\004\043\uffc9\001" +
    "\002\000\004\040\111\001\002\000\004\004\112\001\002" +
    "\000\006\041\uffc4\043\116\001\002\000\004\041\114\001" +
    "\002\000\004\052\115\001\002\000\040\012\uffcb\013\uffcb" +
    "\014\uffcb\015\uffcb\017\uffcb\020\uffcb\022\uffcb\023\uffcb\024" +
    "\uffcb\025\uffcb\026\uffcb\027\uffcb\043\uffcb\052\uffcb\054\uffcb" +
    "\001\002\000\004\004\112\001\002\000\004\041\uffc5\001" +
    "\002\000\014\004\uffe2\006\uffe2\010\uffe2\050\uffe2\051\uffe2" +
    "\001\002\000\014\004\uffe1\006\uffe1\010\uffe1\050\uffe1\051" +
    "\uffe1\001\002\000\014\004\uffe3\006\uffe3\010\uffe3\050\uffe3" +
    "\051\uffe3\001\002\000\014\004\uffde\006\uffde\010\uffde\050" +
    "\uffde\051\uffde\001\002\000\014\004\uffdf\006\uffdf\010\uffdf" +
    "\050\uffdf\051\uffdf\001\002\000\014\004\uffe0\006\uffe0\010" +
    "\uffe0\050\uffe0\051\uffe0\001\002\000\014\004\073\006\066" +
    "\010\065\050\075\051\072\001\002\000\014\012\131\013" +
    "\130\017\uffc6\020\uffc6\043\uffc6\001\002\000\014\004\073" +
    "\006\066\010\065\050\075\051\072\001\002\000\014\004" +
    "\073\006\066\010\065\050\075\051\072\001\002\000\040" +
    "\012\ufff4\013\ufff4\014\134\015\133\017\ufff4\020\ufff4\022" +
    "\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\043\ufff4" +
    "\052\ufff4\054\ufff4\001\002\000\014\004\073\006\066\010" +
    "\065\050\075\051\072\001\002\000\014\004\073\006\066" +
    "\010\065\050\075\051\072\001\002\000\040\012\ufff1\013" +
    "\ufff1\014\ufff1\015\ufff1\017\ufff1\020\ufff1\022\ufff1\023\ufff1" +
    "\024\ufff1\025\ufff1\026\ufff1\027\ufff1\043\ufff1\052\ufff1\054" +
    "\ufff1\001\002\000\040\012\ufff0\013\ufff0\014\ufff0\015\ufff0" +
    "\017\ufff0\020\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026" +
    "\ufff0\027\ufff0\043\ufff0\052\ufff0\054\ufff0\001\002\000\040" +
    "\012\ufff3\013\ufff3\014\134\015\133\017\ufff3\020\ufff3\022" +
    "\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\043\ufff3" +
    "\052\ufff3\054\ufff3\001\002\000\010\012\131\013\130\052" +
    "\141\001\002\000\040\012\uffeb\013\uffeb\014\uffeb\015\uffeb" +
    "\017\uffeb\020\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026" +
    "\uffeb\027\uffeb\043\uffeb\052\uffeb\054\uffeb\001\002\000\016" +
    "\004\073\006\066\010\065\021\146\050\075\051\072\001" +
    "\002\000\010\017\157\020\156\052\uffe6\001\002\000\022" +
    "\012\131\013\130\022\121\023\122\024\125\025\120\026" +
    "\124\027\123\001\002\000\004\052\150\001\002\000\014" +
    "\004\073\006\066\010\065\050\075\051\072\001\002\000" +
    "\004\052\uffe5\001\002\000\004\032\151\001\002\000\012" +
    "\004\052\016\043\030\051\047\053\001\002\000\004\033" +
    "\153\001\002\000\006\031\uffdb\054\uffdb\001\002\000\014" +
    "\004\073\006\066\010\065\050\075\051\072\001\002\000" +
    "\014\012\131\013\130\017\uffe4\020\uffe4\052\uffe4\001\002" +
    "\000\014\004\073\006\066\010\065\050\075\051\072\001" +
    "\002\000\014\004\073\006\066\010\065\050\075\051\072" +
    "\001\002\000\004\052\uffe8\001\002\000\004\052\uffe7\001" +
    "\002\000\016\004\052\016\043\030\051\033\ufffb\037\ufffb" +
    "\047\053\001\002\000\006\033\ufffc\037\ufffc\001\002\000" +
    "\004\054\uffdc\001\002\000\004\032\166\001\002\000\012" +
    "\004\052\016\043\030\051\047\053\001\002\000\004\033" +
    "\170\001\002\000\004\054\uffda\001\002\000\016\004\073" +
    "\006\066\010\065\021\146\050\075\051\072\001\002\000" +
    "\004\052\173\001\002\000\004\032\174\001\002\000\012" +
    "\004\052\016\043\030\051\047\053\001\002\000\004\033" +
    "\176\001\002\000\004\054\uffe9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\174\000\010\002\005\003\007\021\003\001\001\000" +
    "\002\001\001\000\006\022\017\023\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\022\022\023\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\040\001\001\000\002\001\001\000\020\004\053\005\045" +
    "\006\046\012\044\016\047\017\043\026\054\001\001\000" +
    "\002\001\001\000\004\020\163\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\007\070\010\066\011\073\027\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\007" +
    "\137\010\066\011\073\027\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\030\077\031" +
    "\100\001\001\000\004\015\125\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\102\001\001\000\002\001" +
    "\001\000\004\031\106\001\001\000\004\031\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\007\126\010\066\011\073\027\063" +
    "\001\001\000\002\001\001\000\010\010\136\011\073\027" +
    "\063\001\001\000\010\010\131\011\073\027\063\001\001" +
    "\000\002\001\001\000\006\011\135\027\063\001\001\000" +
    "\006\011\134\027\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\007\143\010\066\011\073\013\144\014\142" +
    "\027\063\001\001\000\002\001\001\000\004\015\153\001" +
    "\001\000\002\001\001\000\014\007\143\010\066\011\073" +
    "\014\146\027\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\004\151\005\045\006\046\012\044\016\047" +
    "\017\043\026\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\007\154\010\066\011\073\027\063\001\001" +
    "\000\002\001\001\000\014\007\143\010\066\011\073\014" +
    "\160\027\063\001\001\000\014\007\143\010\066\011\073" +
    "\014\157\027\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\004\162\005\045\006\046\012\044\016\047" +
    "\017\043\026\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\004\166\005\045\006\046" +
    "\012\044\016\047\017\043\026\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\007\143\010\066\011\073" +
    "\013\171\014\142\027\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\004\174\005\045\006\046\012\044" +
    "\016\047\017\043\026\054\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public List<String> reglas = new ArrayList<>();
    public List<String> errors = new ArrayList<>();

    public Map<String, String> idsDataTypeMapping = new HashMap<>();

        public void report_error(String mensaje, Object info) {
            if (info instanceof Symbol) {
                Symbol s = (Symbol) info;
                errors.add("["+ s.left + ":" + s.right + "] - " + mensaje + " - " + s.value);
            }else{
                errors.add(mensaje);
            }
        }

        public void report_fatal_error(String mensaje, Object info) {
            if (info instanceof Symbol) {
                Symbol s = (Symbol) info;
                errors.add("["+ s.left + ":" + s.right + "] - " + mensaje + " after '" + s.value + "'");
            }else{
                errors.add(mensaje);
            }
        }

    public void syntax_error(Symbol s){
        String errMsg = "["+ s.left + ":" + s.right + "] - Token '" + s.value + "' no esperado.";
        errors.add(errMsg);
    }

    public void addDeclarationToDataTypeMapping(String declaration){
        String[] ids = declaration.split(";,")[0].split(";");
        String[] types = declaration.split(";,")[1].split(",");

        for (int i = 0; i < ids.length; i++) {
            idsDataTypeMapping.put(ids[i], types[i]);
        }
    }

    public void idIsAlreadyDeclared(String id){
        if(!idsDataTypeMapping.containsKey(id)){
            errors.add("Declaracion no encontrada para el ID '" + id + "'.");
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= declaraciones INI_PROGRAM lista_sentencias END_PROGRAM 
            {
              String RESULT =null;
		reglas.add("[Regla] S ::= declaraciones INI_PROGRAM lista_sentencias END_PROGRAM");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= write_program 
            {
              String RESULT =null;
		reglas.add("[Regla] S ::= write_program");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // write_program ::= WRITE CTE_STR PYC write_program 
            {
              String RESULT =null;
		reglas.add("[Regla] WRITE CTE_STR PYC write_program");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_program",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // write_program ::= WRITE CTE_STR PYC 
            {
              String RESULT =null;
		reglas.add("[Regla] WRITE CTE_STR PYC");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_program",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lista_sentencias ::= sentencia PYC lista_sentencias 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista_sentencias ::= sentencia PYC 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentencia ::= asignacion 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentencia ::= repeticion 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentencia ::= decision 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sentencia ::= write 
            {
              String RESULT =null;
		reglas.add("[Regla] sentencia ::= write");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // asignacion ::= ID OP_ASIGNACION expresion 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		idIsAlreadyDeclared(id); reglas.add("[Regla] asignacion ::= ID OP_ASIGNACION expresion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // asignacion ::= ID OP_ASIGNACION CTE_STR 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		idIsAlreadyDeclared(id); reglas.add("[Regla] asignacion ::= ID OP_ASIGNACION CTE_STR");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expresion ::= expresion OP_SUMA termino 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expresion ::= expresion OP_RESTA termino 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expresion ::= termino 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // termino ::= termino OP_MULTIPLICACION factor 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // termino ::= termino OP_DIVISION factor 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // termino ::= factor 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // factor ::= ID 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // factor ::= CTE_E 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // factor ::= CTE_F 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // factor ::= A_PARENT expresion C_PARENT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // factor ::= filter 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // repeticion ::= WHILE A_PARENT condicion C_PARENT A_LLAVE lista_sentencias C_LLAVE 
            {
              String RESULT =null;
		reglas.add("[Regla] repeticion ::= WHILE A_PARENT condicion C_PARENT A_LLAVE lista_sentencias C_LLAVE");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeticion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // condicion ::= comparacion OPL_AND comparacion 
            {
              String RESULT =null;
		reglas.add("[Regla] condicion ::= comparacion OPL_AND comparacion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // condicion ::= comparacion OPL_OR comparacion 
            {
              String RESULT =null;
		reglas.add("[Regla] condicion ::= comparacion OPL_OR comparacion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // condicion ::= comparacion 
            {
              String RESULT =null;
		reglas.add("[Regla] condicion ::= comparacion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // condicion ::= OPL_NOT comparacion 
            {
              String RESULT =null;
		reglas.add("[Regla] condicion ::= OPL_NOT comparacion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // comparacion ::= expresion comparador expresion 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // comparador ::= OP_MAYOR 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // comparador ::= OP_MAYOR_IG 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // comparador ::= OP_MENOR 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // comparador ::= OP_MENOR_IG 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // comparador ::= OP_IGUAL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // comparador ::= OP_DIST 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // decision ::= if_stmt 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decision",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // decision ::= if_stmt else_stmt 
            {
              String RESULT =null;
		reglas.add("[Regla] decision ::= if_stmt else_stmt");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decision",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // if_stmt ::= IF A_PARENT condicion C_PARENT A_LLAVE lista_sentencias C_LLAVE 
            {
              String RESULT =null;
		reglas.add("[Regla] if_stmt ::= IF A_PARENT condicion C_PARENT A_LLAVE lista_sentencias C_LLAVE");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // else_stmt ::= ELSE A_LLAVE lista_sentencias C_LLAVE 
            {
              String RESULT =null;
		reglas.add("[Regla] else_stmt ::= ELSE A_LLAVE lista_sentencias C_LLAVE");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // declaraciones ::= INI_DECLARE lista_declaraciones END_DECLARE 
            {
              String RESULT =null;
		reglas.add("[Regla] declaraciones ::= INI_DECLARE lista_declaraciones END_DECLARE");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // declaraciones ::= INI_DECLARE END_DECLARE 
            {
              String RESULT =null;
		reglas.add("[Regla] declaraciones ::= INI_DECLARE lista_declaraciones END_DECLARE");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // lista_declaraciones ::= declaracion PYC lista_declaraciones 
            {
              String RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		addDeclarationToDataTypeMapping(dec);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // lista_declaraciones ::= declaracion PYC 
            {
              String RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		addDeclarationToDataTypeMapping(dec);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // declaracion ::= A_CORCHETE id_y_tipo C_CORCHETE 
            {
              String RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=value; reglas.add("[Regla] declaracion ::= A_CORCHETE id_y_tipo C_CORCHETE");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // id_y_tipo ::= ID COMA id_y_tipo COMA tipo 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nextleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nextright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String next = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=id+";"+next+","+type;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_y_tipo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // id_y_tipo ::= ID C_CORCHETE OP_DECLARACION A_CORCHETE tipo 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=id+";"+","+type;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_y_tipo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // tipo ::= TYPE_INT 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=type;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tipo ::= TYPE_FLOAT 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=type;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // tipo ::= TYPE_STRING 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=type;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // write ::= WRITE CTE_STR 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // write ::= WRITE CTE_F 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // write ::= WRITE CTE_E 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // write ::= WRITE ID 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // filter ::= FILTER A_PARENT condicion_filter COMA A_CORCHETE lista_ids C_CORCHETE C_PARENT 
            {
              String RESULT =null;
		reglas.add("[Regla] filter ::= FILTER A_PARENT condicion_filter COMA A_CORCHETE lista_ids C_CORCHETE C_PARENT");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("filter",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // condicion_filter ::= comparacion_f OPL_AND comparacion_f 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion_filter",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // condicion_filter ::= comparacion_f OPL_OR comparacion_f 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion_filter",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // condicion_filter ::= comparacion_f 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion_filter",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // condicion_filter ::= OPL_NOT comparacion_f 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion_filter",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // comparacion_f ::= GUION_BAJO comparador expresion 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion_f",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // lista_ids ::= ID COMA lista_ids 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_ids",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // lista_ids ::= ID 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_ids",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
